#!/usr/bin/python3.10

import sys
import os

def usage():
    print('usage : [python] [file]')

def die(reason):
    print('\x1b[1;31merror\x1b[0m :', reason, file=sys.stderr)
    sys.exit(1)

class Token:
    # Syntax Sugar
    Comma: str = 'Comma'
    # Types
    Num: str = 'Num'
    Iden: str = 'Iden'
    String: str = 'String'
    # Symbols
    Add: str = 'Add'
    Sub: str = 'Sub'
    Mul: str = 'Mul'
    Div: str = 'Div'
    LT: str = 'LT'
    LTEq: str = 'LTEq'
    GT: str = 'GT'
    GTEq: str = 'GTEq'
    Eq: str = 'Eq'
    DEq: str = 'DEq'
    # Keywords
    Run: str = 'Run'
    Import: str = 'Import'
    Procedure: str = 'Procedure'
    If: str = 'If'
    And: str = 'And'
    Or: str = 'Or'
    End: str = 'End'
    Echo: str = 'Echo'
    Read: str = 'Read'
    # Store
    StoreR = 'StoreR'

    def __init__(self, kind: str, literal: str):
        self.kind: str = kind
        self.literal: str = literal

class Lexer:
    def __init__(self, line: str):
        if line[len(line) - 1] == '\n':
            self.line: str = line[:len(line) - 1]
        else:
            self.line: str = line
        
        self.pos: int = 0
        self.tokens: Token = []

    def lex(self):
        while self.pos < len(self.line):
            match self.get_char():
                case '#':
                    return
                case '+':
                    self.tokens.append(Token(Token.Add, '+'))
                case '-':
                    if self.get_next_char() != ' ':
                        buffer = ''
                        while self.pos < len(self.line) and self.get_char() != ',' and self.get_char() != ' ':
                            buffer += self.get_char()

                            if self.pos < len(self.line) - 1 and self.get_next_char() == ',':
                                break

                            self.advance()
                        
                        self.tokens.append(Token(Token.Num, buffer))
                    else:
                        self.tokens.append(Token(Token.Sub, '-'))
                case '*':
                    self.tokens.append(Token(Token.Mul, '*'))
                case '/':
                    self.tokens.append(Token(Token.Div, '/'))
                case '>':
                    if self.get_next_char() == '=':
                        self.tokens.append(Token(Token.GTEq, '>='))
                        self.advance()
                    else:
                        self.tokens.append(Token(Token.GT, '>'))
                case '<':
                    if self.get_next_char() == '=':
                        self.tokens.append(Token(Token.LTEq, '<='))
                        self.advance()
                    else:
                        self.tokens.append(Token(Token.LT, '<'))
                case '=':
                    if self.get_next_char() == '=':
                        self.tokens.append(Token(Token.DEq, '=='))
                        self.advance()
                    else:
                        self.tokens.append(Token(Token.Eq, '='))
                case ',':
                    self.tokens.append(Token(Token.Comma, ','))
                case '"':
                    buffer = ''
                    
                    self.advance()
                    while self.get_char() != '"':
                        buffer += self.get_char()
                        self.advance()

                    self.tokens.append(Token(Token.String, buffer))
                case _:
                    buffer = ''
                    while self.pos < len(self.line) and self.get_char() != ',' and self.get_char() != ' ':
                        buffer += self.get_char()

                        if self.pos < len(self.line) - 1 and self.get_next_char() == ',':
                            break

                        self.advance()

                    match buffer:
                        case 'run':
                            self.tokens.append(Token(Token.Run, 'run'))
                        case 'import':
                            self.tokens.append(Token(Token.Import, 'import'))
                        case 'proc':
                            self.tokens.append(Token(Token.Procedure, 'proc'))
                        case 'if':
                            self.tokens.append(Token(Token.If, 'if'))
                        case 'and':
                            self.tokens.append(Token(Token.And, 'and'))
                        case 'or':
                            self.tokens.append(Token(Token.Or, 'or'))
                        case 'end':
                            self.tokens.append(Token(Token.End, 'end'))
                        case 'echo':
                            self.tokens.append(Token(Token.Echo, 'echo'))
                        case 'read':
                            self.tokens.append(Token(Token.Read, 'read'))
                        case _:
                            is_num = True
                            for char in buffer:
                                if not char.isdigit() and char != '.' and char != '-':
                                    is_num = False
                                    break
                            
                            if is_num and buffer != '':
                                self.tokens.append(Token(Token.Num, buffer))
                            elif buffer != '':
                                self.tokens.append(Token(Token.Iden, buffer))

            self.advance()

    def get_char(self):
        return self.line[self.pos]

    def get_next_char(self):
        return self.line[self.pos + 1]

    def advance(self):
        self.pos += 1

class DataType:
    def __init__(self, token: Token, is_const: bool):
        self.is_const: bool = is_const
        self.token: Token = token

class Stores:
    def __init__(self):
        self.lpl_store_r: Token = Token('', '')  # To be deprecated
        # Global Constants
        self.lpl_global_consts_vars_dict = {}
        # Procedures
        self.lpl_global_procedures_dict = {}
        self.lpl_global_procedures = [[[]]]
        self.in_procedure = False
        self.procedure_index = 0
        # If
        self.if_skip = False
        self.in_if = False

    def search_procedures_dict(self, term: str) -> int:
        if term in self.lpl_global_procedures_dict:
            return self.lpl_global_procedures[self.lpl_global_procedures_dict[term]]
        else:
            return None        

    def search_consts_vars_dict(self, term: str) -> DataType:
        if term in self.lpl_global_consts_vars_dict:
            return self.lpl_global_consts_vars_dict[term]
        else:
            return None        

class Parser:
    def __init__(self, tokens: Token, stores: Stores):
        self.tokens = tokens
        self.line_num = 1
        self.stores = stores

    def parse_math(self, start: int) -> Token:
        if len(self.tokens) - start == 1:
            if self.tokens[start].kind == Token.Num:
                return Token(Token.Num, self.tokens[start].literal)
            elif self.tokens[start].kind == Token.Iden:
                if self.stores.search_consts_vars_dict(self.tokens[start].literal) != None:
                    self.tokens[start] = \
                        self.stores.search_consts_vars_dict(self.tokens[start].literal).token
                else:
                    die(f'\'{self.tokens[start].literal}\' undefined constant/variable : line {self.line_num}')

            return Token(Token.Num, self.tokens[start].literal)

        if len(self.tokens) - start < 3:
            die(f'maths expresssion requires atleast 3 parameters : line {self.line_num}')

        i = 0
        while i < len(self.tokens) - start:
            if self.tokens[i + start].kind == Token.Iden:
                if self.stores.search_consts_vars_dict(self.tokens[i + start].literal) != None:
                    self.tokens[i + start] = self.stores.search_consts_vars_dict(self.tokens[i + start].literal).token
                else:
                    die(f'\'{self.tokens[i + start].literal}\' undefined constant/variable : line {self.line_num}')
            elif self.tokens[i + start].kind == Token.Num:
                if i + start + 1 < len(self.tokens) and \
                   self.tokens[i + start + 1].kind != Token.Add and \
                   self.tokens[i + start + 1].kind != Token.Sub and \
                   self.tokens[i + start + 1].kind != Token.Mul and \
                   self.tokens[i + start + 1].kind != Token.Div:
                    die(f'\'{self.tokens[i + start + 1].literal}\' expected symbol : line {self.line_num}')
            elif self.tokens[i + start].kind != Token.Add and \
                 self.tokens[i + start].kind != Token.Sub and \
                 self.tokens[i + start].kind != Token.Mul and \
                 self.tokens[i + start].kind != Token.Div:
                if i + start + 1 < len(self.tokens) and self.tokens[i + start + 1].kind != Token.Num:
                    die(f'\'{self.tokens[i + start + 1].literal}\' expected number : line {self.line_num}')
            
            i += 1
        
        i = 0
        buffer = ''
        while i + start < len(self.tokens):
            buffer += self.tokens[i + start].literal + ' '
            i += 1

        return Token(Token.Num, eval(buffer))
    
    def parse_log_statement(self, start: int, end: int):
        if end - start != 2:
            die(f'\'{self.tokens[start + 1].literal}\' requires 2 parameters : line {self.line_num}')

        if self.tokens[start + 1].kind != Token.GT and \
           self.tokens[start + 1].kind != Token.GTEq and \
           self.tokens[start + 1].kind != Token.LT and \
           self.tokens[start + 1].kind != Token.LTEq and \
           self.tokens[start + 1].kind != Token.DEq:
            die(f'\'{self.tokens[start + 1].literal}\' invalid operand : line {self.line_num}')

        old_tokens: Token = self.tokens

        if self.tokens[start].kind == Token.Num and self.tokens[end].kind == Token.Num or \
            self.tokens[start].kind == Token.String and self.tokens[end].kind == Token.String:
                return

        if self.tokens[start].kind == Token.Iden:
            if self.stores.search_consts_vars_dict(self.tokens[start].literal) == None:
                die(f'\'{old_tokens[start].literal}\' undefined constant/variable : line {self.line_num}')
            else:       
                self.tokens[start] = self.stores.search_consts_vars_dict(self.tokens[start].literal).token
        
        if self.tokens[end].kind == Token.Iden:
            if self.stores.search_consts_vars_dict(self.tokens[end].literal) == None:
                die(f'\'{self.tokens[end].literal}\' undefined constant/variable : line {self.line_num}')
            else:             
                self.tokens[end] = self.stores.search_consts_vars_dict(self.tokens[end].literal).token

        if self.tokens[start].kind == Token.Num and self.tokens[end].kind != Token.Num:
            die(f'\'{self.tokens[end].literal}\' expected number : line {self.line_num}')
        elif self.tokens[start].kind == Token.String and self.tokens[end].kind != Token.String:
            die(f'\'{self.tokens[end].literal}\' expeceted string : line {self.line_num}')            

    def parse(self):
        if len(self.tokens) == 0:
            self.line_num += 1
            return
        
        match self.tokens[0].kind:
            case Token.Run:
                if len(self.tokens) != 2:
                    die(f'\'{self.tokens[0].literal}\' requires 1 parameter : line {self.line_num}')
                
                if self.tokens[1].kind != Token.Iden:
                    die(f'\'{self.tokens[1].literal}\' expected literal : line {self.line_num}')

                if self.stores.search_consts_vars_dict(self.tokens[1].literal) != None:
                    die(f'\'{self.tokens[1].literal}\' can only be used on procedures: line {self.line_num}')

                if self.stores.search_procedures_dict(self.tokens[1].literal) == None:
                    die(f'\'{self.tokens[1].literal}\' undefined procedure : line {self.line_num}')
            case Token.Import:
                if len(self.tokens) != 2:
                    die(f'\'{self.tokens[0].literal}\' requires 1 parameter : line {self.line_num}')

                if self.tokens[1].kind != Token.String:
                    die(f'\'{self.tokens[1].literal}\' expected string : line {self.line_num}')

                if self.tokens[1].literal[-4:] != '.bth':
                    die(f'\'{self.tokens[1].literal}\' not a Bismuth file : line {self.line_num}')

                for _, _, files in os.walk('.'):
                    if self.tokens[1].literal in files:
                        return
                
                die(f'\'{self.tokens[1].literal}\' could not be found : line {self.line_num}')
            case Token.Procedure:
                if self.stores.in_procedure:
                    die(f'\'{self.tokens[0].literal}\' can not be nested : line {self.line_num}')
                
                if len(self.tokens) != 2:
                    die(f'\'{self.tokens[0].literal}\' requires 1 parameter : line {self.line_num}')

                if self.tokens[1].kind != Token.Iden:
                    die(f'\'{self.tokens[1].literal}\' expected literal : line {self.line_num}')
                
                if self.stores.search_consts_vars_dict(self.tokens[1].literal) != None:
                    die(f'\'{self.tokens[1].literal}\' redefined as procedure : line {self.line_num}')

                if self.stores.search_procedures_dict(self.tokens[1].literal) != None:
                    die(f'\'{self.tokens[1].literal}\' redefined procedure : line {self.line_num}')
            case Token.If:
                if len(self.tokens) < 4:
                    die(f'\'{self.tokens[0].literal}\' requires 3 parameters : line {self.line_num}')

                j = 1
                while j < len(self.tokens) - 1:
                    self.parse_log_statement(j, j + 2)
                    j += 3
                
                    if j < len(self.tokens) - 1 and self.tokens[j].kind != Token.And and self.tokens[j].kind != Token.Or:
                        die(f'\'{self.tokens[j].literal}\' expected and/or : line {self.line_num}')

                    j += 1

                self.stores.in_if = True
            case Token.End:
                if len(self.tokens) != 1:
                    die(f'\'{self.tokens[0].literal}\' requires no parameters : line {self.line_num}')

                if not self.stores.in_if and not self.stores.in_procedure:
                    die(f'unexpected end : line {self.line_num}')

                if self.stores.in_if:
                    self.stores.in_if = False
                    self.stores.if_skip = False
                else:
                    self.stores.in_procedure = False
            case Token.Echo:
                if self.tokens[len(self.tokens) - 1].kind == Token.Comma:
                    die(f'\'{self.tokens[2].literal}\' expected number/string/store/constant : line {self.line_num}')

                i = 1
                while i < len(self.tokens):
                    if self.tokens[i].kind == Token.Num or self.tokens[i].kind == Token.String:
                        if i < len(self.tokens) - 1 and self.tokens[i + 1].kind != Token.Comma:
                            die(f'\'{self.tokens[i + 1].literal}\' expected comma : line {self.line_num}')
                    else:
                        if self.tokens[i].kind == Token.StoreR or self.tokens[i].kind == Token.Comma:
                            self.tokens[i] = self.get_store_data(self.tokens[i].kind)
                           
                            if self.tokens[i] == Token('', ''):
                                die(f'\'{self.tokens[i].literal}\' not a store or result store is immutable : line {self.line_num}')
                        else:
                            if self.stores.search_consts_vars_dict(self.tokens[i].literal) != None:
                                self.tokens[i] = self.stores.search_consts_vars_dict(self.tokens[i].literal).token
                            else:
                                die(f'\'{self.tokens[i].literal}\' undefined constant/variable : line {self.line_num}')

                    i += 1
            case Token.Read:
                if len(self.tokens) != 2:
                    die(f'\'{self.tokens[0].literal}\' requires 1 parameter : line {self.line_num}')

                if self.tokens[1].kind != Token.String:
                    die(f'\'{self.tokens[1].literal}\' expected string : line {self.line_num}')
            case Token.Iden:
                if len(self.tokens) < 3:
                    die(f'\'{self.tokens[0].literal}\' requires atleast 2 parameters : line {self.line_num}')

                if self.tokens[1].kind != Token.Eq:
                    die(f'\'{self.tokens[1].literal}\' expected assign : line {self.line_num}')

                if self.stores.search_consts_vars_dict(self.tokens[0].literal) != None:
                    if self.stores.search_consts_vars_dict(self.tokens[0].literal).is_const:
                        die(f'\'{self.tokens[0].literal}\' can not be reassigned : line {self.line_num}')
                    elif self.tokens[2].kind == Token.Iden:
                        if self.stores.search_consts_vars_dict(self.tokens[2].literal) != None:
                            self.stores.lpl_global_consts_vars_dict[self.tokens[0].literal] = DataType(self.tokens[2], False)
                        else:
                            die(f'\'{self.tokens[2].literal}\' undefined constant/variable : line {self.line_num}')
                else:
                    if self.tokens[0].literal.isupper():
                        if self.tokens[2].kind == Token.Num:
                            self.stores.lpl_global_consts_vars_dict[self.tokens[0].literal] = DataType(self.parse_math(2), True)
                        elif self.tokens[2].kind == Token.String:
                            self.stores.lpl_global_consts_vars_dict[self.tokens[0].literal] = DataType(self.tokens[2], True)
                    elif self.tokens[0].literal.islower():
                        if self.tokens[2].kind == Token.Num:
                            self.stores.lpl_global_consts_vars_dict[self.tokens[0].literal] = DataType(self.parse_math(2), False)
                        elif self.tokens[2].kind == Token.String:
                            self.stores.lpl_global_consts_vars_dict[self.tokens[0].literal] = DataType(self.tokens[2], True)
            case Token.Num:
                self.parse_math(0)
            case _:
                die(f'\'{self.tokens[0].literal}\' unknown literal : line {self.line_num}')

        self.line_num += 1

    def is_store(self, kind: str) -> bool:
        match kind:
            case Token.StoreR:
                return True
            case _:
                return False

    def get_store_data(self, kind: str) -> Token:
        match kind:
            case Token.StoreR:
                return self.stores.lpl_store_r
            case _:
                return Token('', '')

class Interpreter:
    def __init__(self, tokens: Token, stores: Stores):
        self.tokens = tokens
        self.stores = stores
        
    def interpret(self):
        if len(self.tokens) == 0:
            return

        if self.stores.in_procedure:
            self.stores.lpl_global_procedures[self.stores.procedure_index].append(self.tokens)
        elif self.stores.if_skip:
            return
        else:
            match self.tokens[0].kind:
                case Token.Run:
                    lines = self.stores.search_procedures_dict(self.tokens[1].literal)

                    for line in lines:                        
                        interpreter = Interpreter(line, stores)
                        interpreter.interpret()
                case Token.Import:
                    file = open(self.tokens[1].literal)
                    for line in file.readlines():
                        lexer = Lexer(line)
                        lexer.lex()

                        parser.tokens = lexer.tokens
                        parser.parse()

                        interpreter = Interpreter(parser.tokens, stores)
                        interpreter.interpret()
                case Token.Procedure:
                    self.stores.lpl_global_procedures_dict[self.tokens[1].literal] = self.stores.procedure_index
                    self.stores.in_procedure = True
                case Token.If:
                    match self.tokens[2].kind:
                        case Token.LT:
                            if not (self.tokens[1].literal < self.tokens[3].literal):
                                self.stores.if_skip = True
                        case Token.LTEq:
                            if not (self.tokens[1].literal <= self.tokens[3].literal):
                                self.stores.if_skip = True
                        case Token.GT:
                            if not (self.tokens[1].literal > self.tokens[3].literal):
                                self.stores.if_skip = True
                        case Token.GTEq:
                            if not (self.tokens[1].literal >= self.tokens[3].literal):
                                self.stores.if_skip = True
                        case Token.DEq:
                            if self.tokens[1].literal != self.tokens[3].literal:
                                self.stores.if_skip = True
                case Token.End:
                    self.stores.procedure_index += 1
                case Token.Echo:
                    for element in self.tokens:
                        if element.kind == Token.Num or element.kind == Token.String:
                            print(element.literal, end='')
                    print('')
                case Token.Read:
                    stdin = input(self.tokens[1].literal)

                    is_num = True
                    for char in stdin:
                        if not char.isdigit() and char != '.' and char != '-':
                            is_num = False
                            break
                            
                    if is_num and stdin != '':
                        self.stores.lpl_store_r = Token(Token.Num, stdin)
                    elif stdin != '':
                        self.stores.lpl_store_r = Token(Token.String, stdin)                    

if __name__ == '__main__':
    args = sys.argv

    if len(args) != 2:
        usage()
        die('invalid arguments')

    if args[1][-4:] != '.bth':
        die(f'\'{args[1]}\' not a Bismuth file')

    file = open(args[1])

    # Classes for Parser and Procedures/Constants/Stores
    stores: Stores = Stores()
    parser: Parser = Parser([], stores)

    for line in file.readlines():
        lexer: Lexer = Lexer(line)
        lexer.lex()

        #for token in lexer.tokens:
        #    print(token.kind, token.literal)

        parser.tokens = lexer.tokens
        parser.parse()

        #for token in parser.tokens:
        #    print(token.kind, token.literal)

        interpreter: Interpreter = Interpreter(parser.tokens, stores)
        interpreter.interpret()

        